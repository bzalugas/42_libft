* 42's libft project
First project of 42, this one aims to teach us how to create a personal functions library.
* Testers
We can easily test our functions with existing testers on the web. For this project, I created *my own tester* that can be found [[https://github.com/bzalugas/libft-breaker][here]].
Others are available at:
- [[https://github.com/alelievr/libft-unit-test]]
- [[https://github.com/Tripouille/libftTester]]
- [[https://github.com/0x050f/libft-war-machine]]
* Implemented functions
| Function prototype                                                        | Description |
|---------------------------------------------------------------------------+-------------|
| =int ft_atoi(const char *nptr)=                                           |             |
| =long ft_atol(const char *nptr)=                                          |             |
| =void ft_bzero(void *s, size_t)=                                          |             |
| =void *ft_calloc(size_t nmemb, size_t size)=                              |             |
| =int ft_isalnum(int c)=                                                   |             |
| =int ft_isalpha(int c)=                                                   |             |
| =int ft_isascii(int c)=                                                   |             |
| =int ft_isdigit(int c)=                                                   |             |
| =int ft_isprint(int c)=                                                   |             |
| =int ft_isspace(int c)=                                                   |             |
| =char *ft_itoa(int n)=                                                    |             |
| =void ft_lstadd_back(t_list **lst, t_list *new)=                          |             |
| =void ft_lstadd_front(t_list **lst, t_list *new)=                         |             |
| =void ft_lstclear(t_list **lst, void (*del)(void *))=                     |             |
| =void ft_lstdelone(t_list *lst, void (*del)(void *))=                     |             |
| =void ft_lstiter(t_list *lst, void (*f)(void *))=                         |             |
| =t_list *ft_lstlast(t_list *lst)=                                         |             |
| =t_list *ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))= |             |
| =t_list *ft_lstnew(void *content)=                                        |             |
| =int ft_lstsize(t_list *lst)=                                             |             |
| =void *ft_memchr(const void *s, int c, size_t n)=                         |             |
| =int ft_memcmp(const void *s1, const void *s2, size_t n)=                 |             |
| =void *ft_memcpy(void *dst, const void *src, size_t n)=                   |             |
| void *ft_memmove(void *dst, const void *src, size_t n)                    |             |
|                                                                           |             |
